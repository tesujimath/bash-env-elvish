#!/usr/bin/env bash
#
# Copyright 2023 Simon Guest
#
# Permission is hereby granted, free of charge, to any person
# obtaining a copy of this software and associated documentation files
# (the “Software”), to deal in the Software without restriction,
# including without limitation the rights to use, copy, modify, merge,
# publish, distribute, subl# icense, and/or sell copies of the
# Software, and to permit persons to whom the Software is furnished to
# do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
# BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
# ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
# CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

shopt -s extglob

function emit_vars() {
    local _name
    local -n _emit_setenv="$1"
    local -n _emit_unsetenv="$2"
    local -n _emit_shellvars="$3"

    for _name in "${!_emit_setenv[@]}"; do
        echo "set E:$_name = '${_emit_setenv[$_name]//\'/\'\'}'"
    done

    for _name in "${_emit_unsetenv[@]}"; do
        echo "del E:$_name"
    done

    for _name in "${!_emit_shellvars[@]}"; do
        echo "var $_name = '${_emit_shellvars[$_name]//\'/\'\'}'"
    done
}

function send_error() {
    echo >&2 "ERROR: $1"
}

function get_env() {
    local -n _get_env="$1"
    while IFS='=' read -r -d '' _name _value; do
        # ShellCheck is confused here I think
        # shellcheck disable=SC2004
        _get_env[$_name]="${_value}"
    done < <(env -0)
}

function eval_or_source_and_capture() {
    local _source _path _name _value _env_old _env_new _unset_value
    _path="$1"
    local -n _eval_shellvar_names="$2"
    local -n _eval_setenv="$3"
    local -n _eval_unsetenv="$4"
    local -n _eval_shellvars="$5"

    # get previous env
    declare -A _env_old
    get_env _env_old

    # set all shellvars to distinctive _unset_value
    local _unset_value="_BASH_ENV_ELVISH_UNSET_$$"
    for _name in "${_eval_shellvar_names[@]}"; do
        local -n _eval_shellvar="$_name"
        _eval_shellvar="$_unset_value"
    done

    if test -n "$_path"; then
        # source from file if specified

        if test ! -r "$_path"; then
            send_error "no such file '$_path'"
            return
        fi

        # ShellCheck can't cope with sourcing from an unknown path
        # shellcheck disable=SC1090
        if ! source "$_path" >&2; then
            send_error "failed to load environment from '$_path'"
            return 1
        fi
    else
        # otherwise eval from stdin
        _source=$(</dev/stdin)
        if ! eval "$_source" >&2; then
            send_error "failed to load environment from stdin"
            return 1
        fi
    fi

    # get new environment
    declare -A _env_new
    get_env _env_new

    # determine what changed or became unset
    declare -a _env_changed_or_unset

    # changes
    for _name in "${!_env_new[@]}"; do
        if test "${_env_new[$_name]}" != "${_env_old[$_name]}"; then
            # ShellCheck is confused here I think
            # shellcheck disable=SC2004
            _eval_setenv[$_name]="${_env_new[$_name]}"
        fi
    done

    # unset
    for _name in "${!_env_old[@]}"; do
        if test ! -v "$_name"; then
            _eval_unsetenv+=("$_name")
        fi
    done

    # shellvars
    for _name in "${_eval_shellvar_names[@]}"; do
        _value="${!_name}"
        test "${_value}" != "${_unset_value}" && {
            # ShellCheck is confused here I think
            # shellcheck disable=SC2004
            _eval_shellvars[$_name]="${_value}"
        }
    done
}

function fn_and_capture() {
    local _source _fn _name _value _env_old _env_new _unset_value
    _fn="$1"
    local -n _fn_shellvar_names="$2"
    local -n _fn_setenv="$3"
    local -n _fn_unsetenv="$4"
    local -n _fn_shellvars="$5"

    # get previous env
    declare -A _env_old
    get_env _env_old

    # set all shellvars to dictinctive _unset_value
    local _unset_value="_BASH_ENV_ELVISH_UNSET_$$"
    for _name in "${_fn_shellvar_names[@]}"; do
        local -n _fn_shellvar="$_name"
        _fn_shellvar="$_unset_value"
    done

    # execute the function
    "$_fn"

    # get new environment
    declare -A _env_new
    get_env _env_new

    # determine what changed or became unset
    declare -a _env_changed_or_unset

    # changes
    for _name in "${!_env_new[@]}"; do
        if test "${_env_new[$_name]}" != "${_env_old[$_name]}"; then
            # ShellCheck is confused here I think
            # shellcheck disable=SC2004
            _fn_setenv[$_name]="${_env_new[$_name]}"
        fi
    done

    # unset
    for _name in "${!_env_old[@]}"; do
        if test ! -v "$_name"; then
            _fn_unsetenv+=("$_name")
        fi
    done

    # shellvars
    for _name in "${_fn_shellvar_names[@]}"; do
        _value="${!_name}"
        test "${_value}" != "${_unset_value}" && {
            # ShellCheck is confused here I think
            # shellcheck disable=SC2004
            _fn_shellvars[$_name]="${_value}"
        }
    done
}

function get_args() {
    local -n _opt_path="$1"
    local -n _opt_shellvar_names="$2"
    local -n _opt_shellfn_names="$3"
    shift 3

    # process args
    while test -n "$1"; do
        case "$1" in
        --shellvars)
            test -n "$2" || {
                bad_usage
                exit 1
            }
            mapfile -td, _opt_shellvar_names <<<"$2,"
            unset '_opt_shellvar_names[-1]'
            shift
            ;;
        --shellfns)
            test -n "$2" || {
                bad_usage
                exit 1
            }
            mapfile -td, _opt_shellfn_names <<<"$2,"
            unset '_opt_shellfn_names[-1]'
            shift
            ;;
        -*)
            bad_usage "unexpected option: $1"
            exit 1
            ;;
        *)
            test -n "$_opt_path" && {
                bad_usage
                exit 1
            }
            _opt_path="$1"
            ;;
        esac
        shift
    done
}

function main() {
    local _line _path _stdinval _stdout_id _fn
    declare -a _shellvar_names
    declare -a _shellfn_names

    get_args _path _shellvar_names _shellfn_names "$@"

    declare -A _setenv
    declare -a _unsetenv
    declare -A _shellvars
    eval_or_source_and_capture "$_path" _shellvar_names _setenv _unsetenv _shellvars
    emit_vars _setenv _unsetenv _shellvars

    for _fn in "${_shellfn_names[@]}"; do
        fn_and_capture "$_fn" _shellvar_names _setenv _unsetenv _shellvars
        echo "fn $_fn {"
        emit_vars _setenv _unsetenv _shellvars
        echo "}"
    done
}

function bad_usage() {
    echo >&2 "usage: bash-env-elvish [--shellvars <comma-separate-variables>] [--shellfns <comma-separate-function-names>] [source]"
}

main "$@"
