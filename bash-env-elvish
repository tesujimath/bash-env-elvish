#!/usr/bin/env bash
#
# Copyright 2023 Simon Guest
#
# Permission is hereby granted, free of charge, to any person
# obtaining a copy of this software and associated documentation files
# (the “Software”), to deal in the Software without restriction,
# including without limitation the rights to use, copy, modify, merge,
# publish, distribute, subl# icense, and/or sell copies of the
# Software, and to permit persons to whom the Software is furnished to
# do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
# BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
# ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
# CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

shopt -s extglob

function send_environment() {
    local _name

    for _name in "$@"; do
        if test -v "$_name"; then
            # TODO escape single quotes
            echo "set E:$_name = '${!_name}'"
        else
            echo "del E:$_name"
        fi
    done
}

function send_error() {
    echo >&2 "ERROR: $1"
}

function eval_and_or_source_then_send_environment() {
    local _source _path _name _value _env_old _env_new _env_changed_or_unset _exports _export
    _path="$1"
    shift

    # final argument is array of exports, if any
    declare -a _exports
    _exports=("$@")

    # get previous env
    declare -A _env_old
    while IFS='=' read -r -d '' _name _value; do
        _env_old[$_name]="${_value@Q}"
    done < <(env -0)

    if test -n "$_path"; then
        # source from file if specified

        if test ! -r "$_path"; then
            send_error "no such file '$_path'"
            return
        fi

        # ShellCheck can't cope with sourcing from an unknown path
        # shellcheck disable=SC1090
        if ! source "$_path" >&2; then
            send_error "failed to load environment from '$_path'"
            return 1
        fi
    else
        # otherwise eval from stdin
        _source=$(cat)
        if ! eval "$_source" >&2; then
            send_error "failed to load environment from stdin"
            return 1
        fi
    fi

    # export shell variables to environment as specified, if any
    for _export in "${_exports[@]}"; do
        export "${_export}=${!_export}"
    done

    # get new environment
    declare -A _env_new
    while IFS='=' read -r -d '' _name _value; do
        _env_new[$_name]="${_value@Q}"
    done < <(env -0)

    # determine what changed or became unset
    declare -a _env_changed_or_unset

    # changes
    for _name in "${!_env_new[@]}"; do
        if test "${_env_new[$_name]}" != "${_env_old[$_name]}"; then
            _env_changed_or_unset+=("$_name")
        fi
    done

    # unset
    for _name in "${!_env_old[@]}"; do
        if test ! -v "$_name"; then
            _env_changed_or_unset+=("$_name")
        fi
    done

    send_environment "${_env_changed_or_unset[@]}"
}

function main() {
    local _line _path _stdinval _stdout_id _exports _cwd
    declare -a _exports

    # process args
    while test -n "$1"; do
        case "$1" in
        --export)
            test -n "$2" || {
                bad_usage
                exit 1
            }
            mapfile -t _exports <"${2//,/ /}"
            shift
            ;;
        -*)
            bad_usage "unexpected option: $1"
            exit 1
            ;;
        *)
            test -n "$_path" && {
                bad_usage
                exit 1
            }
            _path="$1"
            ;;
        esac
        shift
    done

    eval_and_or_source_then_send_environment "$_path" "${_exports[@]}"
}

function bad_usage() {
    echo >&2 "usage: bash-env-elvish [--export <comma-separate-variables>] [source]"
}

main "$@"
