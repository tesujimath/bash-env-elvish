#!/usr/bin/env bash
#
# Copyright 2023 Simon Guest
#
# Permission is hereby granted, free of charge, to any person
# obtaining a copy of this software and associated documentation files
# (the “Software”), to deal in the Software without restriction,
# including without limitation the rights to use, copy, modify, merge,
# publish, distribute, subl# icense, and/or sell copies of the
# Software, and to permit persons to whom the Software is furnished to
# do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
# BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
# ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
# CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

VERSION="0.11.0"
PROTOCOL_VERSION="0.95.0"

shopt -s extglob

function send_encoder() {
    echo -en "\04json"
}

function send_hello() {
    jq -c <<EOF
{
  "Hello": {
    "protocol": "nu-plugin",
    "version": "$PROTOCOL_VERSION",
    "features": []
  }
}
EOF
}

function send_metadata() {
    _call_id="$1"
    jq -c <<EOF
{
  "CallResponse": [
    $_call_id,
    {
      "Metadata": {
          "version": "$VERSION"
      }
    }
  ]
}
EOF
}

function send_signature() {
    _call_id="$1"
    jq -c <<EOF
{
  "CallResponse": [
    $_call_id,
    {
      "Signature": [
        {
          "sig": {
            "name": "bash-env",
            "usage": "get environment variables from Bash format file and/or stdin",
            "extra_usage": "",
            "search_terms": [],
            "required_positional": [],
            "optional_positional": [
              {
                "name": "path",
                "desc": "path to environment file",
                "shape": "String",
                "var_id": null,
                "default_value": null
              }
            ],
            "rest_positional": null,
            "named": [
              {
                "long": "help",
                "short": "h",
                "arg": null,
                "required": false,
                "desc": "Display the help message for this command",
                "var_id": null,
                "default_value": null
              },
              {
                "long": "export",
                "short": null,
                "arg": {
                  "List": "String"
                },
                "required": false,
                "desc": "Shell variables to export",
                "var_id": null,
                "default_value": null
              }
            ],
            "input_output_types": [
              [
                "Nothing",
                "Any"
              ],
              [
                "String",
                "Any"
              ]
            ],
            "allow_variants_without_examples": true,
            "is_filter": true,
            "creates_scope": false,
            "allows_unknown_args": false,
            "category": "Env"
          },
          "examples": []
        }
      ]
    }
  ]
}
EOF
}

function send_value() {
    # jq -R produces nothing on empty input, but we want ""
    if test -n "$1"; then
        echo -n "$1" | jq -R
    else
        echo -n '""'
    fi
}

function send_environment() {
    local _n_env _head _tail _name _call_id
    declare -a _tail
    _call_id="$1"
    shift

    _n_env=$#

    _head="$1"
    shift
    _tail=("$@")

    # header
    echo -n "{\"CallResponse\":[$_call_id,{\"PipelineData\":{"
    echo -n "\"Value\":{\"Record\":{\"val\":{"

    # names and values
    if test $_n_env -gt 0; then
        echo -n "\"$_head\":{\"String\":{\"val\":"
        send_value "${!_head}"
        echo -n ",\"span\":{\"start\":0,\"end\":0}}}"

        for _name in "${_tail[@]}"; do
            if test -v "$_name"; then
                echo -n ",\"$_name\":{\"String\":{\"val\":"
                send_value "${!_name}"
                echo -n ",\"span\":{\"start\":0,\"end\":0}}}"
            else
                # unset, TODO
                :
            fi
        done
    fi

    # trailer
    echo '},"span":{"start":0,"end":0}}}}}]}'
}

function send_error() {
    local _call_id _msg
    _call_id="$1"
    _msg="$2"
    jq -c <<EOF
{
  "CallResponse": [
    $_call_id,
    {
      "Error": {
        "msg": "$_msg",
        "labels": [
          {
            "text": "bash-env",
            "span": {
              "start": 0,
              "end": 0
            }
          }
        ],
        "code": null,
        "url": null,
        "help": null,
        "inner": []
      }
    }
  ]
}
EOF
}

function eval_and_or_source_then_send_environment() {
    local _source _path _name _value _env_old _env_new _env_changed_or_unset _call_id _exports _export
    _call_id="$1"
    shift

    _path="$1"
    shift

    # final argument is array of exports, if any
    declare -a _exports
    _exports=("$@")

    # get previous env
    declare -A _env_old
    while IFS='=' read -r -d '' _name _value; do
        _env_old[$_name]="${_value@Q}"
    done < <(env -0)

    # source from file
    if test -n "$_path"; then

        if test ! -r "$_path"; then
            send_error "$_call_id" "no such file '$_path'"
            return
        fi

        # ShellCheck can't cope with sourcing from an unknown path
        # shellcheck disable=SC1090
        if ! source "$_path" >&2; then
            send_error "$_call_id" "failed to load environment from '$_path'"
            return 1
        fi
    fi

    # eval from stdin until EOF
    _source=$(cat)
    if ! eval "$_source" >&2; then
        send_error "$_call_id" "failed to load environment from stdin"
        return 1
    fi

    # export shell variables to environment as specified, if any
    for _export in "${_exports[@]}"; do
        export "${_export}=${!_export}"
    done

    # get new environment
    declare -A _env_new
    while IFS='=' read -r -d '' _name _value; do
        _env_new[$_name]="${_value@Q}"
    done < <(env -0)

    # determine what changed or became unset
    declare -a _env_changed_or_unset

    # changes
    for _name in "${!_env_new[@]}"; do
        if test "${_env_new[$_name]}" != "${_env_old[$_name]}"; then
            _env_changed_or_unset+=("$_name")
        fi
    done

    # unset
    for _name in "${!_env_old[@]}"; do
        if test ! -v "$_name"; then
            _env_changed_or_unset+=("$_name")
        fi
    done

    send_environment "$_call_id" "${_env_changed_or_unset[@]}" | jq -c
}

function read_stream() {
    local _line _data_id _active_streams
    local _stream_id="$1"

    declare -A _active_streams
    _active_streams["$_stream_id"]=X
    shift

    # get other active streams
    while test -n "$1"; do
        _active_streams["$1"]=X
        shift
    done

    while true; do
        read -rs _line

        # blank line handling
        if test -z "$_line"; then
            break
        fi

        case "$_line" in
        \{\"Data\":\[+([0-9]),*)
            _data_id=$(jq '.Data[0]' <<<"$_line")
            if test "${_data_id}" = "${_stream_id}"; then
                # sed is used to remove empty lines, to mitigate the double newline
                jq -r '.Data[1].Raw.Ok | implode' <<<"$_line" | sed -r '/^$/d'
            fi
            ;;
        \{\"End\":[0-9]*)
            _end_id=$(jq '.End' <<<"$_line")
            unset "_active_streams[$_end_id]"
            ;;
        esac

        if test "${#_active_streams[@]}" == 0; then
            break
        fi
    done
}

function get_current_dir_request() {
    local _call_id

    _call_id="$1"
    echo "{\"EngineCall\":{\"context\":$_call_id,\"id\":0,\"call\":\"GetCurrentDir\"}}"
}

function get_current_dir_response() {
    local _line

    read -rs _line
    echo "$_line" | jq -r '.EngineCallResponse[1].PipelineData.Value.String.val'
}

function run_as_plugin() {
    local _line _path _stdinval _call_id _stdout_id _exports _cwd
    declare -a _exports
    send_encoder

    while true; do
        read -rs _line

        # blank line handling
        if test -z "$_line"; then
            break
        fi

        case "$_line" in
        \{\"Hello\":*)
            send_hello
            ;;
        \"Goodbye\")
            exit
            ;;
        \{\"Call\":\[+([0-9]),*)
            _call_id=$(jq '.Call[0]' <<<"$_line")
            case "$_line" in
            \{\"Call\":\[+([0-9]),\"Metadata\"*)
                send_metadata "$_call_id"
                ;;
            \{\"Call\":\[+([0-9]),\"Signature\"*)
                send_signature "$_call_id"
                ;;
            \{\"Call\":\[+([0-9]),\{\"Run\"*)
                _path=$(echo "$_line" | jq -r '.Call[1].Run.call.positional[0].String.val // empty')
                # Nushell may pass through ~ verbatim which we must cope with explicitly
                _path="${_path/#\~/$HOME}"

                # relative path requires us to determine cwd from the engine
                if test -n "$_path" -a "${_path::1}" != /; then
                    get_current_dir_request "$_call_id"
                    _cwd=$(get_current_dir_response)
                    _path="$_cwd/$_path"
                fi

                # stdin could come in different ways, or not at all:
                case $(echo "$_line" | jq -r '.Call[1].Run.input | if . == "Empty" then "Empty" elif .Value.String | has("val") then "String" elif has("ByteStream") then "ByteStream" else "Other" end') in
                Empty)
                    _stdinval=""
                    ;;
                String)
                    _stdinval=$(echo "$_line" | jq -r '.Call[1].Run.input.Value.String.val')
                    ;;
                ByteStream)
                    _stdout_id=$(echo "$_line" | jq -r '.Call[1].Run.input.ByteStream.id')
                    _stdinval=$(read_stream "$_stdout_id")
                    ;;
                esac

                # get exports, if any
                mapfile -t _exports < <(echo "$_line" | jq -r '.Call[1].Run.call.named // [] | .[] | select(.[0].item == "export") | .[1].List.vals.[].String.val')

                echo "$_stdinval" | eval_and_or_source_then_send_environment "$_call_id" "$_path" "${_exports[@]}"
                ;;
            *)
                echo >&2 "unexpected call: $_line"
                ;;
            esac
            ;;
        *)
            echo >&2 "unexpected input: $_line"
            ;;
        esac
    done
}

function bad_usage() {
    echo >&2 "usage: nu_plugin_bash_env [--stdio] [--standalone [sig | to-json <env-file>]]"
    echo >&2 "Maybe this plugin doesn't support your version of Nushell"
    echo >&2 "Please consider creating an issue at"
    echo >&2 "https://github.com/tesujimath/nu_plugin_bash_env/issues"
    test -n "$*" && echo >&2 "$*"
}

# process args
unset stdio
unset standalone_hello
unset standalone_sig
unset standalone_to_json
while test -n "$1"; do
    case "$1" in
    --stdio)
        stdio=1
        ;;
    --standalone)
        case "$2" in
        hello)
            standalone_hello=1
            shift
            ;;
        sig)
            standalone_sig=1
            shift
            ;;
        to-json)
            standalone_to_json="$3"
            shift 2
            ;;
        *)
            echo >&2 "unsupported standalone operation: $2"
            exit 1
            ;;
        esac
        ;;
    *)
        bad_usage "unexpected arg: $1"
        exit 1
        ;;
    esac
    shift
done

if test -n "$stdio"; then
    run_as_plugin
elif test -n "$standalone_sig"; then
    send_signature 99
elif test -n "$standalone_hello"; then
    send_hello
elif test -n "$standalone_to_json"; then
    declare -a _exports
    eval_and_or_source_then_send_environment 99 "$standalone_to_json" "${_exports[@]}"
else
    bad_usage "need --stdio or --to-json"
fi
