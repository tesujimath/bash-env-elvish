#!/usr/bin/env bash
#
# Copyright 2023 Simon Guest
#
# Permission is hereby granted, free of charge, to any person
# obtaining a copy of this software and associated documentation files
# (the “Software”), to deal in the Software without restriction,
# including without limitation the rights to use, copy, modify, merge,
# publish, distribute, subl# icense, and/or sell copies of the
# Software, and to permit persons to whom the Software is furnished to
# do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
# BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
# ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
# CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

shopt -s extglob

function emit_vars() {
    local _name
    local -n _emit_setenv="$1"
    local -n _emit_unsetenv="$2"
    local -n _emit_set="$3"

    for _name in "${!_emit_setenv[@]}"; do
        echo "set E:$_name = '${_emit_setenv[$_name]//\'/\'\'}'"
    done

    for _name in "${_emit_unsetenv[@]}"; do
        echo "del E:$_name"
    done

    # TODO shellvars
    # for _name in "${!_set[@]}"; do
    #     echo "var $_name = '${_setenv[$_name]//\'/\'\'}'"
    # done
}

function send_error() {
    echo >&2 "ERROR: $1"
}

function get_env() {
    local -n _get_env="$1"
    while IFS='=' read -r -d '' _name _value; do
        _get_env[$_name]="${_value}"
    done < <(env -0)
}

function eval_or_source_and_capture() {
    local _source _path _name _value _env_old _env_new _unset_value
    _path="$1"
    local -n _eval_shellvars="$2"
    local -n _eval_setenv="$3"
    local -n _eval_unsetenv="$4"
    local -n _eval_set="$5"

    # get previous env
    declare -A _env_old
    get_env _env_old

    # TODO set all shellvars to dictinctive _unset_value
    _unset_value="XXX_UNSET_XXX"

    if test -n "$_path"; then
        # source from file if specified

        if test ! -r "$_path"; then
            send_error "no such file '$_path'"
            return
        fi

        # ShellCheck can't cope with sourcing from an unknown path
        # shellcheck disable=SC1090
        if ! source "$_path" >&2; then
            send_error "failed to load environment from '$_path'"
            return 1
        fi
    else
        # otherwise eval from stdin
        _source=$(</dev/stdin)
        if ! eval "$_source" >&2; then
            send_error "failed to load environment from stdin"
            return 1
        fi
    fi

    # get new environment
    declare -A _env_new
    get_env _env_new

    # determine what changed or became unset
    declare -a _env_changed_or_unset

    # changes
    for _name in "${!_env_new[@]}"; do
        if test "${_env_new[$_name]}" != "${_env_old[$_name]}"; then
            _eval_setenv[$_name]="${_env_new[$_name]}"
        fi
    done

    # unset
    for _name in "${!_env_old[@]}"; do
        if test ! -v "$_name"; then
            _eval_unsetenv+=("$_name")
        fi
    done

    # shellvars
    # TODO test against _unset_value, not empty
    for _name in "${_eval_shellvars[@]}"; do
        _value="${!_name}"
        test -n "${_value}" && {
            _eval_set[$_name]="${_value}"
        }
    done
}

function main() {
    local _line _path _stdinval _stdout_id _cwd
    declare -a _shellvars

    # process args
    while test -n "$1"; do
        case "$1" in
        --shellvars)
            test -n "$2" || {
                bad_usage
                exit 1
            }
            mapfile -td, _shellvars <<<"$2,"
            unset '_shellvars[-1]'
            shift
            ;;
        -*)
            bad_usage "unexpected option: $1"
            exit 1
            ;;
        *)
            test -n "$_path" && {
                bad_usage
                exit 1
            }
            _path="$1"
            ;;
        esac
        shift
    done

    # eval_or_source_then_send_environment "$_path" "${_shellvars[@]}"
    declare -A _setenv
    declare -a _unsetenv
    declare -A _set
    eval_or_source_and_capture "$_path" _shellvars _setenv _unsetenv _set
    emit_vars _setenv _unsetenv _set
}

function bad_usage() {
    echo >&2 "usage: bash-env-elvish [--export <comma-separate-variables>] [source]"
}

main "$@"
